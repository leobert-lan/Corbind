/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        if (!project.plugins.hasPlugin('kotlin-android')) {
            source = android.sourceSets.main.java.srcDirs
        }

        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

        exclude '**/internal/*'
        include '**/*.java'

        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.linksOffline "https://developer.android.com/reference",
                "${project.android.sdkDirectory}/docs/reference"

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }


        def androidJavadocsJar = project.tasks.register("androidJavadocsJar", Jar.class) {
            classifier = "javadoc"
        }

        if (plugins.hasPlugin('kotlin-android')) {
            def dokkaOutput = "${project.docsDir}/dokka"

            project.plugins.apply('org.jetbrains.dokka')
            def path = new File(project.projectDir, "")
            project.dokka {
                outputFormat = "html"
                outputDirectory = dokkaOutput

                configuration {
                    reportUndocumented = false
                    skipDeprecated = true
                    skipEmptyPackages = true

                    sourceLink {
                        path = "src/main/kotlin"
                        url = "https://github.com/LDRAlighieri/Corbind/blob/master/"
                        lineSuffix = "#L"
                    }

                    jdkVersion = 8

                    externalDocumentationLink {
                        url = new URL("https://developer.android.com/reference/")
                        packageListUrl = new URL("https://developer.android.com/reference/package-list")
                    }

                    externalDocumentationLink {
                        url = new URL("https://developer.android.com/reference/")
                        packageListUrl = new URL("https://developer.android.com/reference/androidx/package-list")
                    }

                    externalDocumentationLink {
                        url = new URL("https://developer.android.com/reference/")
                        packageListUrl = new URL("https://developer.android.com/reference/com/google/android/material/package-list")
                    }

//                    externalDocumentationLink {
//                        url = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/")
//                        packageListUrl = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/package-list")
//                    }
//
//                    externalDocumentationLink {
//                        url = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-android/")
//                        packageListUrl = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-android/package-list")
//                    }
                }

            }

            androidJavadocsJar.configure {
                dependsOn "dokka"
                from dokkaOutput
            }

        } else {
            androidJavadocsJar.configure {
                dependsOn "javadoc"
                from project.androidJavadocs.destinationDir
            }
        }
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from project.android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
